Today I want to modify my project config files to improve how environment variables are accessed. To do this I am adding a utils.exs file to the config folder
that i will include in the other config files to use the macros it defines for fetching values from the environment.

Below is my file so far, do you see any issues or have any concerns?

defmodule ConfigUtils do
  @prefix %{
    prod: "JETZY_PROD",
    stage: "JETZY_STAGE",
    dev: "JETZY_DEV",
    test: "JETZY_TEST"
  }

  def prefix(key, use_prefix) when use_prefix in [true, :auto] do
    @prefix[Mix.env()] <> "_" <> key
  end

  def prefix(key, _) do
    key
  end

  def env_as(key, as, env, default \\ nil, required \\ :required, use_prefix \\ :auto) do
    key = prefix(key, use_prefix)
    case System.get_env(key) do
      nil ->
        cond do
          required in [true, :required] ->
            raise("#{env.file}:#{env.line}  Config Error - User must set #{key}=[...] environment variable")
          required == :silent -> :nop
          :else ->
            IO.puts("#{env.file}:#{env.line} Config Error - User should set #{key}=[...] environment variable")
        end
        default
    v ->
      case as do
        :string -> v
        :list -> String.to_list(v)
        type when type in [:bool, :flag] ->
          cond do
            v in [true, "true", "TRUE", "on", "ON", 1] -> true
            v in [false, "false", "FALSE", "off", "OFF", 0] -> false
          end
        type when type in [:int, :integer] ->
          String.to_integer(v)
      end
    end
  end

  defmacro env_setting(key, options \\ [default: false, required: true, as: :string, prefix: true]) do
    default = options[:default]
    required = cond do
      options[:required] -> :required
      options[:silent] -> :silent
      :else -> :optional
    end
    prefix = case options[:prefix] do
      :auto -> :auto
      false -> false
      true -> true
      _ -> :auto
    end
    as = options[:as] || :string
    quote do
      ConfigUtils.env_as(unquote(key), unquote(as), unquote(__ENV__), unquote(default), unquote(required), unquote(prefix))
    end
  end
end

